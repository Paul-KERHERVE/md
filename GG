import csv
import os
import shutil
import tempfile # Utilisé pour créer un fichier temporaire pour la sortie
import sys # Utilisé pour sys.exit en cas d'erreur critique

# --- CONFIGURATION UTILISATEUR START ---
# MODIFIEZ ATTENTIVEMENT CETTE SECTION SELON VOS BESOINS

# Chemins vers les fichiers CSV source (ServiceNow) et cible (MyAPM)
# CES FICHIERS DOIVENT ÊTRE AU FORMAT CSV.
SOURCE_FILE_PATH = "ServiceNow_Export.csv"  # Exemple: "C:\\Exports\\ServiceNow_Data.csv"
TARGET_FILE_PATH = "MyAPM_Export.csv"      # Exemple: "C:\\Exports\\MyAPM_Data.csv"

# Répertoire de sortie sur SharePoint (lecteur réseau mappé)
# Le nom du fichier de sortie sera basé sur le nom du fichier cible avec "_updated.csv"
SHAREPOINT_OUTPUT_DIRECTORY = "S:\\EspacePartage\\Synchronisation" # Exemple: "P:\\EquipeITRisk\\FichiersSynchronises"
# Assurez-vous que ce chemin existe et que vous avez les droits d'écriture.

# Noms des colonnes contenant l'identifiant unique dans les fichiers source et cible
# Ces colonnes sont cruciales pour faire correspondre les enregistrements.
UNIQUE_ID_COLUMN_SOURCE = "ID_Application_SN" # Nom de la colonne ID dans ServiceNow
UNIQUE_ID_COLUMN_TARGET = "ID_Application_APM" # Nom de la colonne ID dans MyAPM

# Correspondance des colonnes et transformations optionnelles
# Format: {
#   'NomColonneSource': ('NomColonneCible', fonction_de_transformation_optionnelle)
# }
# - 'NomColonneSource': Nom de la colonne dans le fichier exporté de ServiceNow.
# - 'NomColonneCible': Nom de la colonne correspondante dans le fichier MyAPM à mettre à jour.
# - fonction_de_transformation_optionnelle:
#   - Mettez None si aucune transformation n'est nécessaire (copie directe de la valeur).
#   - Sinon, fournissez une fonction qui prend la valeur de la source en argument
#     et retourne la valeur transformée pour la cible.

# Exemple de fonction de transformation (à adapter ou supprimer si non nécessaire)
def transformer_statut(valeur_source):
    """Transforme les statuts de ServiceNow vers ceux de MyAPM."""
    valeur_source_str = str(valeur_source).strip().lower()
    correspondances = {
        "actif": "En production",
        "inactif": "Retiré",
        "en développement": "En projet"
        # Ajoutez d'autres correspondances ici
    }
    return correspondances.get(valeur_source_str, valeur_source) # Retourne la valeur originale si non trouvée

def normaliser_code_asset(valeur_source):
    """Exemple pour gérer "A4" vs "4A". Adaptez la logique."""
    val_str = str(valeur_source).strip()
    if len(val_str) == 2 and val_str[0].isalpha() and val_str[1].isdigit():
        # Si format LettreChiffre (ex: A4), inverse pour ChiffreLettre (ex: 4A)
        return val_str[1] + val_str[0]
    return val_str

COLUMN_MAPPING = {
    "NomApplication": ("Nom_App_Complet", None),
    "ResponsableMétier": ("Contact_Metier_Principal", None),
    "StatutOpérationnel": ("Phase_Cycle_Vie", transformer_statut),
    "CodeAsset": ("Identifiant_Interne_Asset", normaliser_code_asset),
    # ---- IMPORTANT : Ajoutez ici TOUTES vos correspondances ----
    # Exemple:
    # "nom_col_servicenow_1": ("nom_col_myapm_1", None),
    # "nom_col_servicenow_2": ("nom_col_myapm_2", ma_fonction_de_transformation_specifique),
}

# --- CONFIGURATION UTILISATEUR END ---


# --- Fonctions utilitaires (normalement pas besoin de modifier ci-dessous) ---

def lire_donnees_csv(chemin_fichier, colonne_id_unique):
    """Lit les données d'un fichier CSV et les stocke dans un dictionnaire indexé par l'ID unique."""
    print(f"Lecture des données depuis : {chemin_fichier}")
    donnees_dict = {}
    entetes = []
    try:
        with open(chemin_fichier, mode='r', newline='') as fichier_entree: # Pas d'encodage spécifié
            lecteur_csv = csv.DictReader(fichier_entree)
            entetes = lecteur_csv.fieldnames
            if not entetes:
                print(f"Avertissement: Le fichier CSV {chemin_fichier} semble vide ou sans en-têtes.")
                return {}, []
            
            if colonne_id_unique not in entetes:
                print(f"Erreur critique: La colonne ID unique '{colonne_id_unique}' n'est pas trouvée dans les en-têtes de {chemin_fichier}.")
                print(f"En-têtes disponibles : {entetes}")
                return None, entetes # Erreur

            for ligne in lecteur_csv:
                id_unique = ligne.get(colonne_id_unique)
                if id_unique and id_unique.strip():
                    if id_unique in donnees_dict:
                        print(f"Avertissement: ID unique '{id_unique}' dupliqué dans {chemin_fichier}. L'entrée précédente sera écrasée.")
                    donnees_dict[id_unique] = ligne
                else:
                    print(f"Avertissement: Ligne sans ID unique (ou ID vide) trouvée dans {chemin_fichier}. Ligne ignorée : {ligne}")
            print(f"{len(donnees_dict)} enregistrements lus avec succès depuis {chemin_fichier}.")
            return donnees_dict, entetes
    except FileNotFoundError:
        print(f"Erreur: Fichier non trouvé : {chemin_fichier}")
        return None, []
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier CSV {chemin_fichier}: {e}")
        return None, []

def ecrire_donnees_csv(chemin_fichier, liste_de_dictionnaires, entetes):
    """Écrit une liste de dictionnaires dans un fichier CSV."""
    print(f"Écriture des données mises à jour vers : {chemin_fichier}")
    try:
        with open(chemin_fichier, mode='w', newline='') as fichier_sortie: # Pas d'encodage spécifié
            writer = csv.DictWriter(fichier_sortie, fieldnames=entetes, extrasaction='ignore')
            writer.writeheader()
            writer.writerows(liste_de_dictionnaires)
        print(f"{len(liste_de_dictionnaires)} enregistrements écrits avec succès dans {chemin_fichier}.")
        return True
    except Exception as e:
        print(f"Erreur lors de l'écriture du fichier CSV {chemin_fichier}: {e}")
        return False

# --- Logique principale de synchronisation ---
def main():
    """Fonction principale orchestrant le processus de synchronisation."""
    print("Démarrage du processus de synchronisation des données (CSV uniquement)...")

    # Vérification que les fichiers d'entrée sont bien des CSV
    if not SOURCE_FILE_PATH.lower().endswith(".csv"):
        print(f"Erreur: Le fichier source '{SOURCE_FILE_PATH}' doit être un fichier .csv. Arrêt.")
        sys.exit(1)
    if not TARGET_FILE_PATH.lower().endswith(".csv"):
        print(f"Erreur: Le fichier cible '{TARGET_FILE_PATH}' doit être un fichier .csv. Arrêt.")
        sys.exit(1)
    
    # Création d'un répertoire temporaire pour le fichier de sortie avant copie
    repertoire_temporaire_pour_sortie = tempfile.mkdtemp(prefix="sync_csv_output_")
    print(f"Répertoire temporaire pour la sortie créé : {repertoire_temporaire_pour_sortie}")


    # --- Lecture des données ---
    donnees_source, _ = lire_donnees_csv(SOURCE_FILE_PATH, UNIQUE_ID_COLUMN_SOURCE)
    if donnees_source is None:
        print("Échec de la lecture des données source. Arrêt du script.")
        shutil.rmtree(repertoire_temporaire_pour_sortie)
        sys.exit(1)
    if not donnees_source:
        print("Les données source sont vides. Aucune mise à jour à effectuer. Arrêt du script.")
        shutil.rmtree(repertoire_temporaire_pour_sortie)
        sys.exit(0)

    donnees_cible, entetes_cible_originaux = lire_donnees_csv(TARGET_FILE_PATH, UNIQUE_ID_COLUMN_TARGET)
    if donnees_cible is None:
        print("Échec de la lecture des données cible. Arrêt du script.")
        shutil.rmtree(repertoire_temporaire_pour_sortie)
        sys.exit(1)
    if not entetes_cible_originaux:
        print("Les données cibles sont vides ou les en-têtes n'ont pas pu être lus. Impossible de continuer. Arrêt.")
        shutil.rmtree(repertoire_temporaire_pour_sortie)
        sys.exit(1)

    # --- Processus de synchronisation ---
    print("Début de la synchronisation des enregistrements...")
    compteur_mises_a_jour = 0
    entetes_cible_finaux = list(entetes_cible_originaux)

    for id_source, enregistrement_source in donnees_source.items():
        if id_source in donnees_cible:
            enregistrement_cible_a_maj = donnees_cible[id_source]
            changement_effectue_sur_enregistrement = False

            for col_source, (col_cible, func_transform) in COLUMN_MAPPING.items():
                if col_source in enregistrement_source:
                    valeur_source = enregistrement_source[col_source]
                    valeur_a_ecrire = valeur_source

                    if func_transform:
                        try:
                            valeur_a_ecrire = func_transform(valeur_source)
                        except Exception as e:
                            print(f"Avertissement: Erreur lors de l'application de la transformation pour la colonne source '{col_source}' (ID: {id_source}). Valeur originale utilisée. Erreur: {e}")
                    
                    if enregistrement_cible_a_maj.get(col_cible) != valeur_a_ecrire:
                        enregistrement_cible_a_maj[col_cible] = valeur_a_ecrire
                        changement_effectue_sur_enregistrement = True
                    
                    if col_cible not in entetes_cible_finaux:
                        print(f"Info: La colonne cible mappée '{col_cible}' n'était pas dans les en-têtes originaux du fichier cible. Elle sera ajoutée.")
                        entetes_cible_finaux.append(col_cible)
                else:
                    print(f"Avertissement: La colonne source '{col_source}' (mappée vers '{col_cible}') n'a pas été trouvée dans l'enregistrement source avec ID '{id_source}'. Ce champ ne sera pas mis à jour pour cet enregistrement.")

            if changement_effectue_sur_enregistrement:
                compteur_mises_a_jour += 1
        else:
            print(f"Info: L'ID source '{id_source}' n'a pas été trouvé dans les données cibles. Cet enregistrement sera ignoré.")

    print(f"Synchronisation terminée. {compteur_mises_a_jour} enregistrement(s) cible(s) ont été modifié(s).")

    liste_donnees_cible_maj = list(donnees_cible.values())

    # --- Écriture du fichier de sortie et copie vers SharePoint ---
    nom_base_cible_original = os.path.basename(TARGET_FILE_PATH)
    nom_fichier_sortie_base = os.path.splitext(nom_base_cible_original)[0] + "_updated"
    nom_fichier_sortie_csv = nom_fichier_sortie_base + ".csv"
    
    chemin_sortie_sharepoint_complet = os.path.join(SHAREPOINT_OUTPUT_DIRECTORY, nom_fichier_sortie_csv)

    try:
        if not os.path.exists(SHAREPOINT_OUTPUT_DIRECTORY):
            print(f"Le répertoire SharePoint '{SHAREPOINT_OUTPUT_DIRECTORY}' n'existe pas. Tentative de création...")
            os.makedirs(SHAREPOINT_OUTPUT_DIRECTORY, exist_ok=True)
            print(f"Répertoire SharePoint créé ou existant : {SHAREPOINT_OUTPUT_DIRECTORY}")
    except OSError as e:
        print(f"Erreur critique: Impossible de créer le répertoire SharePoint '{SHAREPOINT_OUTPUT_DIRECTORY}'. {e}")
        print("Veuillez vérifier le chemin et vos droits d'accès.")
        shutil.rmtree(repertoire_temporaire_pour_sortie)
        sys.exit(1)

    chemin_csv_maj_temporaire = os.path.join(repertoire_temporaire_pour_sortie, "fichier_cible_mis_a_jour_final.csv")
    if ecrire_donnees_csv(chemin_csv_maj_temporaire, liste_donnees_cible_maj, entetes_cible_finaux):
        print(f"Tentative de copie du fichier mis à jour vers SharePoint : {chemin_sortie_sharepoint_complet}")
        try:
            shutil.copy2(chemin_csv_maj_temporaire, chemin_sortie_sharepoint_complet)
            print(f"Fichier mis à jour copié avec succès vers : {chemin_sortie_sharepoint_complet}")
        except Exception as e:
            print(f"Erreur lors de la copie du fichier vers SharePoint ({chemin_sortie_sharepoint_complet}): {e}")
            print("Veuillez vérifier la connectivité réseau, le chemin SharePoint et les permissions.")
            print(f"Le fichier mis à jour est disponible localement ici : {chemin_csv_maj_temporaire}")
    else:
        print("Échec de l'écriture du fichier CSV mis à jour dans le répertoire temporaire. Copie vers SharePoint annulée.")
        print(f"Le fichier intermédiaire est dans : {repertoire_temporaire_pour_sortie}")

    # --- Nettoyage ---
    print(f"Nettoyage du répertoire temporaire : {repertoire_temporaire_pour_sortie}")
    try:
        shutil.rmtree(repertoire_temporaire_pour_sortie)
        print("Répertoire temporaire nettoyé avec succès.")
    except OSError as e:
        print(f"Avertissement: Impossible de supprimer complètement le répertoire temporaire {repertoire_temporaire_pour_sortie}. {e}")
        print("Vous devrez peut-être le supprimer manuellement.")

    print("Processus de synchronisation terminé.")

if __name__ == "__main__":
    # Vérification basique du chemin SharePoint
    if not (SHAREPOINT_OUTPUT_DIRECTORY and len(SHAREPOINT_OUTPUT_DIRECTORY) > 3 and (SHAREPOINT_OUTPUT_DIRECTORY[1:3] == ":\\" or SHAREPOINT_OUTPUT_DIRECTORY.startswith("\\\\"))):
         print(f"Avertissement: Le chemin SharePoint configuré '{SHAREPOINT_OUTPUT_DIRECTORY}' ne ressemble pas à un lecteur mappé standard (ex: S:\\dossier) ou un chemin UNC (ex: \\\\serveur\\partage). Veuillez vérifier la configuration.")

    main()
