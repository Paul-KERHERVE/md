#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Outil de synchronisation inter-logiciels
Développé par: Paul-KERHERVE
Date: 2025-05-06
"""

import os
import csv
import datetime
import shutil

#==============================================================================
# SECTION 1: CONFIGURATION
#==============================================================================

# Configuration des correspondances entre colonnes source et cible
CORRESPONDANCE_COLONNES = {
    "var": "variable",
    "tel": "telephone", 
    "id_client": "id",
    "nom": "nom_client",
    "prenom": "prenom_client",
    "email": "adresse_email",
    "statut": "status_client",
    "categorie": "cat_client",
}

# Colonnes que nous voulons synchroniser
COLONNES_A_SYNCHRONISER = [
    "nom", "prenom", "tel", "email", "statut", "categorie"
]

# Configuration des correspondances pour valeurs de menus déroulants
ATTRIBUTS_MENUS_DEROULANTS = {
    "statut": {
        "A": "Actif",
        "I": "Inactif",
        "P": "En attente",
        "B": "Bloqué",
    },
    "categorie": {
        "PRO": "Professionnel",
        "PART": "Particulier",
        "ASSOC": "Association",
        "ADMIN": "Administration",
    },
}

# Identifiants uniques pour faire correspondre les enregistrements
COLONNE_ID_SOURCE = "id_client"
COLONNE_ID_CIBLE = "id"

# Dossier de travail par défaut (là où se trouvent les fichiers)
DOSSIER_TRAVAIL = "Music/projet"

# Noms des fichiers source et cible (à modifier selon vos besoins)
FICHIER_SOURCE = "source.csv"
FICHIER_CIBLE = "cible.csv"

#==============================================================================
# SECTION 2: FONCTIONS POUR LIRE ET ÉCRIRE DES CSV
#==============================================================================

def read_csv_file(filepath, id_column):
    """
    Lit un fichier CSV et retourne un dictionnaire indexé par l'ID.
    
    Args:
        filepath: Nom ou chemin du fichier CSV
        id_column: Nom de la colonne contenant l'identifiant unique
        
    Returns:
        Tuple (dictionnaire de données, liste des entêtes)
    """
    print(f"Lecture du fichier {filepath}...")
    data = {}
    headers = []
    
    try:
        # Ouvrir le fichier en mode lecture
        with open(filepath, 'r', encoding='utf-8', newline='') as csvfile:
            reader = csv.reader(csvfile)
            headers = next(reader)  # Première ligne = entêtes
            
            # Trouver l'index de la colonne ID
            try:
                id_index = headers.index(id_column)
            except ValueError:
                print(f"Erreur: Colonne '{id_column}' non trouvée dans {filepath}")
                return {}, headers
            
            # Lire chaque ligne et créer un dictionnaire par ID
            for row in reader:
                if len(row) > id_index and row[id_index].strip():
                    record_id = row[id_index]
                    # Créer un dictionnaire {nom_colonne: valeur}
                    data[record_id] = {headers[i]: row[i] for i in range(len(row))}
        
        print(f"Lecture terminée: {len(data)} enregistrements chargés")
        return data, headers
        
    except UnicodeDecodeError:
        # Si erreur d'encodage UTF-8, essayer Latin-1
        print(f"Problème d'encodage UTF-8, tentative avec Latin-1...")
        try:
            with open(filepath, 'r', encoding='latin-1', newline='') as csvfile:
                reader = csv.reader(csvfile)
                headers = next(reader)
                id_index = headers.index(id_column)
                for row in reader:
                    if len(row) > id_index and row[id_index].strip():
                        data[row[id_index]] = {headers[i]: row[i] for i in range(len(row))}
            print(f"Lecture terminée avec Latin-1: {len(data)} enregistrements")
            return data, headers
        except Exception as e:
            print(f"Échec de la lecture: {str(e)}")
            return {}, headers
    except Exception as e:
        print(f"Erreur lors de la lecture: {str(e)}")
        return {}, headers


def write_csv_file(data, headers, filepath):
    """
    Écrit les données dans un fichier CSV.
    
    Args:
        data: Dictionnaire des données à écrire
        headers: Liste des entêtes de colonnes
        filepath: Chemin du fichier de sortie
        
    Returns:
        bool: True si succès, False sinon
    """
    print(f"Écriture du fichier {filepath}...")
    try:
        with open(filepath, 'w', encoding='utf-8', newline='') as csvfile:
            writer = csv.writer(csvfile)
            
            # Écrire les entêtes
            writer.writerow(headers)
            
            # Écrire les données
            for record_id, record in data.items():
                # Construire chaque ligne en maintenant l'ordre des colonnes
                row = [record.get(header, "") for header in headers]
                writer.writerow(row)
        
        print(f"Écriture terminée: {len(data)} enregistrements écrits")
        return True
    except Exception as e:
        print(f"Erreur lors de l'écriture: {str(e)}")
        return False


#==============================================================================
# SECTION 3: SYNCHRONISATION DES DONNÉES
#==============================================================================

def map_value(value, column_name):
    """
    Convertit une valeur selon les correspondances des menus déroulants.
    
    Args:
        value: La valeur à transformer
        column_name: Le nom de la colonne
    
    Returns:
        La valeur transformée ou la valeur originale
    """
    # Si la colonne a des valeurs de menu déroulant et la valeur existe dans ce menu
    if column_name in ATTRIBUTS_MENUS_DEROULANTS and value in ATTRIBUTS_MENUS_DEROULANTS[column_name]:
        return ATTRIBUTS_MENUS_DEROULANTS[column_name][value]
    
    # Sinon, ne pas modifier la valeur
    return value


def synchronize_data(source_data, target_data, columns_to_sync):
    """
    Synchronise les données source vers les données cible.
    
    Args:
        source_data: Dictionnaire des données source
        target_data: Dictionnaire des données cible
        columns_to_sync: Liste des colonnes à synchroniser
        
    Returns:
        Tuple (données mises à jour, statistiques)
    """
    print("Synchronisation des données...")
    stats = {
        "total_source": len(source_data),
        "total_target": len(target_data),
        "matched": 0,      # Enregistrements trouvés dans les deux fichiers
        "updated": 0,      # Enregistrements modifiés
        "unchanged": 0,    # Enregistrements trouvés mais non modifiés
        "not_found": 0     # IDs source non trouvés dans la cible
    }
    
    # Pour chaque enregistrement dans la source
    for source_id, source_record in source_data.items():
        # Est-ce que cet ID existe dans la cible?
        if source_id in target_data:
            stats["matched"] += 1
            target_record = target_data[source_id]
            
            # Compter les changements pour cet enregistrement
            changes_for_record = 0
            
            # Pour chaque colonne à synchroniser
            for source_col in columns_to_sync:
                # Trouver le nom de la colonne correspondante dans la cible
                target_col = CORRESPONDANCE_COLONNES.get(source_col, source_col)
                
                # Si les deux fichiers ont cette colonne
                if source_col in source_record and target_col in target_record:
                    # Convertir la valeur si nécessaire (ex: "A" → "Actif")
                    original_value = source_record[source_col]
                    mapped_value = map_value(original_value, source_col)
                    
                    # Si les valeurs sont différentes, mettre à jour
                    if mapped_value != target_record[target_col]:
                        target_data[source_id][target_col] = mapped_value
                        changes_for_record += 1
            
            # Compter cet enregistrement comme mis à jour ou inchangé
            if changes_for_record > 0:
                stats["updated"] += 1
            else:
                stats["unchanged"] += 1
        else:
            # ID source non trouvé dans la cible
            stats["not_found"] += 1
    
    print(f"Synchronisation terminée:")
    print(f"  - {stats['matched']} enregistrements correspondants trouvés")
    print(f"  - {stats['updated']} enregistrements mis à jour")
    print(f"  - {stats['unchanged']} enregistrements inchangés")
    print(f"  - {stats['not_found']} enregistrements non trouvés dans la cible")
    
    return target_data, stats


def create_backup(filepath):
    """
    Crée une sauvegarde d'un fichier.
    
    Args:
        filepath: Chemin du fichier à sauvegarder
        
    Returns:
        str: Chemin du fichier de sauvegarde ou None si échec
    """
    if not os.path.exists(filepath):
        return None
    
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{filepath}.{timestamp}.bak"
    
    try:
        shutil.copy2(filepath, backup_path)
        print(f"Sauvegarde créée: {backup_path}")
        return backup_path
    except Exception as e:
        print(f"Erreur lors de la sauvegarde: {str(e)}")
        return None


#==============================================================================
# SECTION 4: FONCTION PRINCIPALE
#==============================================================================

def main():
    """Fonction principale du script."""
    print("=== OUTIL DE SYNCHRONISATION INTER-LOGICIELS ===")
    print(f"Démarré le {datetime.datetime.now().strftime('%Y-%m-%d à %H:%M:%S')}")
    
    try:
        # 1. Changer le répertoire de travail (résout les problèmes de permission)
        print(f"Changement du répertoire de travail vers: {DOSSIER_TRAVAIL}")
        os.chdir(DOSSIER_TRAVAIL)
        print(f"Répertoire actuel: {os.getcwd()}")
        
        # 2. Utiliser les noms de fichiers prédéfinis (pas d'input)
        source_path = FICHIER_SOURCE
        target_path = FICHIER_CIBLE
        
        print(f"Fichier source: {source_path}")
        print(f"Fichier cible: {target_path}")
        
        # 3. Vérifier si les fichiers existent
        if not os.path.exists(source_path):
            print(f"Erreur: Le fichier source '{source_path}' n'existe pas.")
            return
        if not os.path.exists(target_path):
            print(f"Erreur: Le fichier cible '{target_path}' n'existe pas.")
            return
        
        # 4. Créer une sauvegarde du fichier cible
        create_backup(target_path)
        
        # 5. Lire les données des fichiers CSV
        source_data, source_headers = read_csv_file(source_path, COLONNE_ID_SOURCE)
        target_data, target_headers = read_csv_file(target_path, COLONNE_ID_CIBLE)
        
        if not source_data or not target_data:
            print("Erreur: Impossible de lire les données des fichiers.")
            return
        
        # 6. Synchroniser les données
        updated_data, stats = synchronize_data(source_data, target_data, COLONNES_A_SYNCHRONISER)
        
        # 7. Générer un nom pour le fichier de sortie
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M")
        output_filename = f"données_synchronisées_{timestamp}.csv"
        
        # 8. Écrire le fichier de sortie
        if write_csv_file(updated_data, target_headers, output_filename):
            print(f"Fichier mis à jour créé: {output_filename}")
            print("\nSynchronisation terminée avec succès!")
        
    except Exception as e:
        print(f"\nUne erreur s'est produite: {str(e)}")
    
    print("==================================================")


if __name__ == "__main__":
    main()
